service: petrealm

plugins:
  - serverless-offline

custom:
  dotenv:
    path: .env
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0

package:
  individually: true
  include:
    - backend/**
  exclude:
    - node_modules/**
    - .env
    - .git/**
    - README.md
    - .vscode/**
    - "*.log"
    - node_modules/aws-sdk/**
    - frontend/**

functions:
  getAllPets:
    handler: backend/src/services/index.getAllPets
    events:
      - http:
          path: pets
          method: get
          cors: true
  getPetById:
    handler: backend/src/services/index.getPetById
    events:
      - http:
          path: pets/{id}
          method: get
          cors: true
  addPet:
    handler: backend/src/services/index.addPet
    events:
      - http:
          path: pets
          method: post
          cors: true
  feedPet:
    handler: backend/src/services/index.feedPet
    events:
      - http:
          path: pets/{id}/feed
          method: post
          cors: true

  releasePet:
    handler: backend/src/services/index.releasePet
    events:
      - http:
          path: pets/{id}
          method: delete
          cors: true

  hungerDecay:
    handler: backend/src/services/index.hungerDecay
    events:
      - schedule:
          rate: rate(3 hours)

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: petrealm-serverless-deployments
  environment:
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:DescribeLogStreams"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "rds:*"
        - "cloudwatch:*"
      Resource: "arn:aws:logs:us-east-2:*:*"
